-- 220926 nifi_type 컬럼 제거
-- REST Server colloector 구간
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'REST Server', 'REST Server', 'Processor');

INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Base Path', 'Base path for incoming connections', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'contentListener' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Listening Port', 'The Port to listen on for incoming connections', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'health-check-port', 'The port to listen on for incoming health check requests. If set, it must be different from the Listening Port. Configure this port if the processor is set to use two-way SSL and a load balancer that does not support client authentication for health check requests is used. Only /<base_path>/healthcheck service is available via this port and only GET and HEAD requests are supported. If the processor is set not to use SSL, SSL will not be used on this port, either. If the processor is set to use one-way SSL, one-way SSL will be used on this port. If the processor is set to use two-way SSL, one-way SSL will be used on this port (client authentication not required).', false, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Data to Receive per Second', 'The maximum amount of data to receive per second; this allows the bandwidth to be throttled to a specified data rate; if not specified, the data rate is not throttled', false, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Authorized DN Pattern', 'A Regular Expression to apply against the Subject''s Distinguished Name of incoming connections. If the Pattern does not match the Subject DN, the the processor will respond with a status of HTTP 403 Forbidden.', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '.*' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'authorized-issuer-dn-pattern', 'A Regular Expression to apply against the Issuer''s Distinguished Name of incoming connections. If the Pattern does not match the Issuer DN, the processor will respond with a status of HTTP 403 Forbidden.', false, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '.*' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Unconfirmed Flowfile Time', 'The maximum amount of time to wait for a FlowFile to be confirmed before it is removed from the cache', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '60 secs' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'HTTP Headers to receive as Attributes (Regex)', 'Specifies the Regular Expression that determines the names of HTTP Headers that should be passed along as FlowFile attributes', false, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '.*' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Return Code', 'The HTTP return code returned after every HTTP call', false, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '200' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'multipart-request-max-size', 'The max size of the request. Only applies for requests with Content-Type: multipart/form-data, and is used to prevent denial of service type of attacks, to prevent filling up the heap or disk space', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '1 MB' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'multipart-read-buffer-size', 'The threshold size, at which the contents of an incoming file would be written to disk. Only applies for requests with Content-Type: multipart/form-data. It is used to prevent denial of service type of attacks, to prevent filling up the heap or disk space.', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '1 MB' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'max-thread-pool-size', 'The maximum number of threads to be used by the embedded Jetty server. The value can be set between 8 and 1000. The value of this property affects the performance of the flows and the operating system, therefore the default value should only be changed in justified cases. A value that is less than the default value may be suitable if only a small number of HTTP clients connect to the server. A greater value may be suitable if a large number of HTTP clients are expected to make requests to the server simultaneously.', true, 'REST Server');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '200' );

------------------------------------------------------------------------------------------------------------------------------------------------------------
-- REST API collector 구간
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'REST API', 'REST API', 'Processor');

INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'HTTP Method', 'HTTP request method (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS). Arbitrary methods are also supported. Methods other than POST, PUT and PATCH will be sent without a message body.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'POST,GET,PUT,DELETE' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Remote URL', 'Remote URL which will be connected to, including scheme, host, port, path.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Connection Timeout', 'Max wait time for connection to remote service.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '5 sec' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Read Timeout', 'Max wait time for response from remote service.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '15 sec' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'idle-timeout', 'Max idle time before closing connection to the remote service.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '5 mins' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'max-idle-connections', 'Max number of idle connections to keep open.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '5' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Include Date Header', 'Include an RFC-2616 Date header in the request.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'True,False' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Follow Redirects', 'Follow HTTP redirects issued by remote server.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'True,False' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'cookie-strategy', 'Strategy for accepting and persisting HTTP cookies. Accepting cookies enables persistence across multiple requests.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'DISABLED,ACCEPT_ALL' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'disable-http2', 'Determines whether or not to disable use of the HTTP/2 protocol version. If disabled, only HTTP/1.1 is supported.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'False,True' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'flow-file-naming-strategy', 'Determines the strategy used for setting the filename attribute of the FlowFile.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'RANDOM,URL_PATH' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Attributes to Send', 'Regular expression that defines which attributes to send as HTTP headers in the request. If not defined, no attributes are sent as headers. Also any dynamic properties set will be sent as headers. The dynamic property key will be the header key and the dynamic property value will be interpreted as expression language will be the header value.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Useragent', 'The Useragent identifier sent along with each request', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Basic Authentication Username', 'The username to be used by the client to authenticate against the Remote URL.  Cannot include control characters (0-31), '':'', or DEL (127).', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Basic Authentication Password', 'The password to be used by the client to authenticate against the Remote URL.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Put Response Body In Attribute', 'If set, the response body received back will be put into an attribute of the original FlowFile instead of a separate FlowFile. The attribute key to put to is determined by evaluating value of this property. ', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Length To Put In Attribute', 'If routing the response body to an attribute of the original (by setting the \"Put response body in attribute\" property or by receiving an error status code), the number of characters put to the attribute value will be at most this amount. This is important because attributes are held in memory and large attributes will quickly cause out of memory issues. If the output goes longer than this value, it will be truncated to fit. Consider making this smaller if able.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Digest Authentication', 'Whether to communicate with the website using Digest Authentication. ''Basic Authentication Username'' and ''Basic Authentication Password'' are used for authentication.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Always Output Response', 'Will force a response FlowFile to be generated and routed to the ''Response'' relationship regardless of what the server status code received is or if the processor is configured to put the server response body in the request attribute. In the later configuration a request FlowFile with the response body in the attribute and a typical response FlowFile will be emitted to their respective relationships.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Add Response Headers to Request', 'Enabling this property saves all the response headers to the original request. This may be when the response headers are needed but a response is not generated due to the status code received.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Content-Type', 'The Content-Type to specify for when content is being transmitted through a PUT, POST or PATCH. In the case of an empty value after evaluating an expression language expression, Content-Type defaults to application/octet-stream', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '${mime.type}' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'send-message-body', 'If true, sends the HTTP message body on POST/PUT/PATCH requests (default).  If false, suppresses the message body and content-type header for these requests.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'true,false' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Use Chunked Encoding', 'When POST''ing, PUT''ing or PATCH''ing content set this property to true in order to not pass the ''Content-length'' header and instead send ''Transfer-Encoding'' with a value of ''chunked''. This will enable the data transfer mechanism which was introduced in HTTP 1.1 to pass data of unknown lengths in chunks.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'use-etag', 'Enable HTTP entity tag (ETag) support for HTTP requests.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'etag-max-cache-size', 'The maximum size that the ETag cache should be allowed to grow to. The default size is 10MB.', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '10MB' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'ignore-response-content', 'If true, the processor will not write the response''s content into the flow file.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'form-body-form-name', 'When Send Message Body is true, and FlowFile Form Data Name is set,  the FlowFile will be sent as the message body in multipart/form format with this value as the form data name.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'set-form-filename', 'When Send Message Body is true, FlowFile Form Data Name is set, and Set FlowFile Form Data File Name is true, the FlowFile''s fileName value will be set as the filename property of the form data.', false, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'true,false' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Scheduling', 'Scheduling API call (unit = sec)', true, 'REST API');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '120 sec' );

------------------------------------------------------------------------------------------------------------------------------------------------------------
--  Database-Postgres collector 구간 : SQL select query는 선택 값이지만, 흐름 상 true로 설정
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'Database-Postgres', 'Database-Postgres', 'Processor');
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'sql-pre-query', 'A semicolon-delimited list of queries executed before the main SQL query is executed. For example, set session properties before main query. It''s possible to include semicolons in the statements themselves by escaping them with a backslash (''\\;''). Results/outputs from these queries will be suppressed if there are no errors.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'SQL select query', 'The SQL select query to execute. The query can be empty, a constant value, or built from attributes using Expression Language. If this property is specified, it will be used regardless of the content of incoming flowfiles. If this property is empty, the content of the incoming flow file is expected to contain a valid SQL select query, to be issued by the processor to the database. Note that Expression Language is not evaluated for flow file contents.', true, 'Database-Postgres'); -- 흐름 상 true
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'sql-post-query', 'A semicolon-delimited list of queries executed after the main SQL query is executed. Example like setting session properties after main query. It''s possible to include semicolons in the statements themselves by escaping them with a backslash (''\\;''). Results/outputs from these queries will be suppressed if there are no errors.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Wait Time', 'The maximum amount of time allowed for a running SQL select query  , zero means there is no limit. Max time less than 1 second will be equal to zero.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0 seconds' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-normalize', 'Whether to change non-Avro-compatible characters in column names to Avro-compatible characters. For example, colons and periods will be changed to underscores in order to build a valid Avro record.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-user-logical-types', 'Whether to use Avro Logical Types for DECIMAL/NUMBER, DATE, TIME and TIMESTAMP columns. If disabled, written as string. If enabled, Logical types are used and written as its underlying type, specifically, DECIMAL/NUMBER as logical ''decimal'': written as bytes with additional precision and scale meta data, DATE as logical ''date-millis'': written as int denoting days since Unix epoch (1970-01-01), TIME as logical ''time-millis'': written as int denoting milliseconds since Unix epoch, and TIMESTAMP as logical ''timestamp-millis'': written as long denoting milliseconds since Unix epoch. If a reader of written Avro records also knows these logical types, then these values can be deserialized with more context depending on reader implementation.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'compression-format', 'Compression type to use when writing Avro files. Default is None.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'NONE,BZIP2,DEFLATE,SNAPPY,LZO' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-default-precision', 'When a DECIMAL/NUMBER value is written as a ''decimal'' Avro logical type, a specific ''precision'' denoting number of available digits is required. Generally, precision is defined by column data type definition or database engines default. However undefined precision (0) can be returned from some database engines. ''Default Decimal Precision'' is used when writing those undefined precision numbers.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '10' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-default-scale', 'When a DECIMAL/NUMBER value is written as a ''decimal'' Avro logical type, a specific ''scale'' denoting number of available decimal digits is required. Generally, scale is defined by column data type definition or database engines default. However when undefined precision (0) is returned, scale can also be uncertain with some database engines. ''Default Decimal Scale'' is used when writing those undefined numbers. If a value has more decimals than specified scale, then the value will be rounded-up, e.g. 1.53 becomes 2 with scale 0, and 1.5 with scale 1.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-max-rows', 'The maximum number of result rows that will be included in a single FlowFile. This will allow you to break up very large result sets into multiple FlowFiles. If the value specified is zero, then all rows are returned in a single FlowFile.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-output-batch-size', 'The number of output FlowFiles to queue before committing the process session. When set to zero, the session will be committed when all result set rows have been processed and the output FlowFiles are ready for transfer to the downstream relationship. For large result sets, this can cause a large burst of FlowFiles to be transferred at the end of processor execution. If this property is set, then when the specified number of FlowFiles are ready for transfer, then the session will be committed, thus releasing the FlowFiles to the downstream relationship. NOTE: The fragment.count attribute will not be set on FlowFiles when this property is set.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-fetch-size', 'The number of result rows to be fetched from the result set at a time. This is a hint to the database driver and may not be honored and/or exact. If the value specified is zero, then the hint is ignored.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-auto-commit', 'Enables or disables the auto commit functionality of the DB connection. Default value is ''true''. The default value can be used with most of the JDBC drivers and this functionality doesn''t have any impact in most of the cases since this processor is used to read data. However, for some JDBC drivers such as PostgreSQL driver, it is required to disable the auto committing functionality to limit the number of result rows fetching at a time. When auto commit is enabled, postgreSQL driver loads whole result set to memory at once. This could lead for a large amount of memory usage when executing queries which fetch large data sets. More Details of this behaviour in PostgreSQL driver can be found in https://jdbc.postgresql.org//documentation/head/query.html.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'true,false' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Scheduling', 'Scheduling API call (unit = sec)', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '120 sec' );
-- Controller 구간 : Database user와 password는 nifi 상에서는 선택 값이지만, 흐름 상 필수가 되어야 해서 true로 설정
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'Database-Postgres', 'DBCPConnectionPool', 'Controller');
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Database Connection URL', 'A database connection URL used to connect to a database. May contain database system name, host, port, database name and some parameters. The exact syntax of a database connection URL is specified by your DBMS.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'jdbc:postgresql://postgresql:5432/postgres' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Database User', 'Database user name', true, 'Database-Postgres'); -- 흐름 상 true가 되어야 함
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Password', 'The password for the database user', true, 'Database-Postgres'); -- 흐름 상 true가 되어야 함
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Wait Time', 'The maximum amount of time that the pool will wait (when there are no available connections)  for a connection to be returned before failing, or -1 to wait indefinitely. ', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '500 millis' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Total Connections', 'The maximum number of active connections that can be allocated from this pool at the same time,  or negative for no limit.', true, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '8' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Validation-query', 'Validation query used to validate connections before returning them. When connection is invalid, it gets dropped and new valid connection will be returned. Note!! Using validation might have some performance penalty.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-min-idle-conns', 'The minimum number of connections that can remain idle in the pool without extra ones being created. Set to or zero to allow no idle connections.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-max-idle-conns', 'The maximum number of connections that can remain idle in the pool without extra ones being released. Set to any negative value to allow unlimited idle connections.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '8' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-max-conn-lifetime', 'The maximum lifetime in milliseconds of a connection. After this time is exceeded the connection will fail the next activation, passivation or validation test. A value of zero or less means the connection has an infinite lifetime.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-time-between-eviction-runs', 'The number of milliseconds to sleep between runs of the idle connection evictor thread. When non-positive, no idle connection evictor thread will be run.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-min-evictable-idle-time', 'The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '30 mins' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-soft-min-evictable-idle-time', 'The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction by the idle connection evictor, with the extra condition that at least a minimum number of idle connections remain in the pool. When the not-soft version of this option is set to a positive value, it is examined first by the idle connection evictor: when idle connections are visited by the evictor, idle time is first compared against it (without considering the number of idle connections in the pool) and then against this soft option, including the minimum idle connections constraint.', false, 'Database-Postgres');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );


--  Database-MySQL collector 구간 : SQL select query는 선택 값이지만, 흐름 상 true로 설정
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'Database-MySQL', 'Database-MySQL', 'Processor');
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'sql-pre-query', 'A semicolon-delimited list of queries executed before the main SQL query is executed. For example, set session properties before main query. It''s possible to include semicolons in the statements themselves by escaping them with a backslash (''\\;''). Results/outputs from these queries will be suppressed if there are no errors.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'SQL select query', 'The SQL select query to execute. The query can be empty, a constant value, or built from attributes using Expression Language. If this property is specified, it will be used regardless of the content of incoming flowfiles. If this property is empty, the content of the incoming flow file is expected to contain a valid SQL select query, to be issued by the processor to the database. Note that Expression Language is not evaluated for flow file contents.', true, 'Database-MySQL'); -- 흐름 상 true
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'sql-post-query', 'A semicolon-delimited list of queries executed after the main SQL query is executed. Example like setting session properties after main query. It''s possible to include semicolons in the statements themselves by escaping them with a backslash (''\\;''). Results/outputs from these queries will be suppressed if there are no errors.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Wait Time', 'The maximum amount of time allowed for a running SQL select query  , zero means there is no limit. Max time less than 1 second will be equal to zero.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0 seconds' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-normalize', 'Whether to change non-Avro-compatible characters in column names to Avro-compatible characters. For example, colons and periods will be changed to underscores in order to build a valid Avro record.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-user-logical-types', 'Whether to use Avro Logical Types for DECIMAL/NUMBER, DATE, TIME and TIMESTAMP columns. If disabled, written as string. If enabled, Logical types are used and written as its underlying type, specifically, DECIMAL/NUMBER as logical ''decimal'': written as bytes with additional precision and scale meta data, DATE as logical ''date-millis'': written as int denoting days since Unix epoch (1970-01-01), TIME as logical ''time-millis'': written as int denoting milliseconds since Unix epoch, and TIMESTAMP as logical ''timestamp-millis'': written as long denoting milliseconds since Unix epoch. If a reader of written Avro records also knows these logical types, then these values can be deserialized with more context depending on reader implementation.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'compression-format', 'Compression type to use when writing Avro files. Default is None.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'NONE,BZIP2,DEFLATE,SNAPPY,LZO' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-default-precision', 'When a DECIMAL/NUMBER value is written as a ''decimal'' Avro logical type, a specific ''precision'' denoting number of available digits is required. Generally, precision is defined by column data type definition or database engines default. However undefined precision (0) can be returned from some database engines. ''Default Decimal Precision'' is used when writing those undefined precision numbers.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '10' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-default-scale', 'When a DECIMAL/NUMBER value is written as a ''decimal'' Avro logical type, a specific ''scale'' denoting number of available decimal digits is required. Generally, scale is defined by column data type definition or database engines default. However when undefined precision (0) is returned, scale can also be uncertain with some database engines. ''Default Decimal Scale'' is used when writing those undefined numbers. If a value has more decimals than specified scale, then the value will be rounded-up, e.g. 1.53 becomes 2 with scale 0, and 1.5 with scale 1.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-max-rows', 'The maximum number of result rows that will be included in a single FlowFile. This will allow you to break up very large result sets into multiple FlowFiles. If the value specified is zero, then all rows are returned in a single FlowFile.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-output-batch-size', 'The number of output FlowFiles to queue before committing the process session. When set to zero, the session will be committed when all result set rows have been processed and the output FlowFiles are ready for transfer to the downstream relationship. For large result sets, this can cause a large burst of FlowFiles to be transferred at the end of processor execution. If this property is set, then when the specified number of FlowFiles are ready for transfer, then the session will be committed, thus releasing the FlowFiles to the downstream relationship. NOTE: The fragment.count attribute will not be set on FlowFiles when this property is set.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-fetch-size', 'The number of result rows to be fetched from the result set at a time. This is a hint to the database driver and may not be honored and/or exact. If the value specified is zero, then the hint is ignored.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-auto-commit', 'Enables or disables the auto commit functionality of the DB connection. Default value is ''true''. The default value can be used with most of the JDBC drivers and this functionality doesn''t have any impact in most of the cases since this processor is used to read data. However, for some JDBC drivers such as PostgreSQL driver, it is required to disable the auto committing functionality to limit the number of result rows fetching at a time. When auto commit is enabled, postgreSQL driver loads whole result set to memory at once. This could lead for a large amount of memory usage when executing queries which fetch large data sets. More Details of this behaviour in PostgreSQL driver can be found in https://jdbc.postgresql.org//documentation/head/query.html.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'true,false' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Scheduling', 'Scheduling API call (unit = sec)', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '120 sec' );
-- Controller 구간 : Database user와 password는 nifi 상에서는 선택 값이지만, 흐름 상 필수가 되어야 해서 true로 설정
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'Database-MySQL', 'DBCPConnectionPool', 'Controller');
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Database Connection URL', 'A database connection URL used to connect to a database. May contain database system name, host, port, database name and some parameters. The exact syntax of a database connection URL is specified by your DBMS.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'jdbc:mysql://mysql:3306/mytest' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Database User', 'Database user name', true, 'Database-MySQL'); -- 흐름 상 true가 되어야 함
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Password', 'The password for the database user', true, 'Database-MySQL'); -- 흐름 상 true가 되어야 함
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Wait Time', 'The maximum amount of time that the pool will wait (when there are no available connections)  for a connection to be returned before failing, or -1 to wait indefinitely. ', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '500 millis' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Total Connections', 'The maximum number of active connections that can be allocated from this pool at the same time,  or negative for no limit.', true, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '8' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Validation-query', 'Validation query used to validate connections before returning them. When connection is invalid, it gets dropped and new valid connection will be returned. Note!! Using validation might have some performance penalty.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-min-idle-conns', 'The minimum number of connections that can remain idle in the pool without extra ones being created. Set to or zero to allow no idle connections.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-max-idle-conns', 'The maximum number of connections that can remain idle in the pool without extra ones being released. Set to any negative value to allow unlimited idle connections.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '8' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-max-conn-lifetime', 'The maximum lifetime in milliseconds of a connection. After this time is exceeded the connection will fail the next activation, passivation or validation test. A value of zero or less means the connection has an infinite lifetime.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-time-between-eviction-runs', 'The number of milliseconds to sleep between runs of the idle connection evictor thread. When non-positive, no idle connection evictor thread will be run.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-min-evictable-idle-time', 'The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '30 mins' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values( (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-soft-min-evictable-idle-time', 'The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction by the idle connection evictor, with the extra condition that at least a minimum number of idle connections remain in the pool. When the not-soft version of this option is set to a positive value, it is examined first by the idle connection evictor: when idle connections are visited by the evictor, idle time is first compared against it (without considering the number of idle connections in the pool) and then against this soft option, including the minimum idle connections constraint.', false, 'Database-MySQL');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );



--  Database-MariaDB collector 구간 : SQL select query는 선택 값이지만, 흐름 상 true로 설정
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'Database-MariaDB', 'Database-MariaDB', 'Processor');
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'sql-pre-query', 'A semicolon-delimited list of queries executed before the main SQL query is executed. For example, set session properties before main query. It''s possible to include semicolons in the statements themselves by escaping them with a backslash (''\\;''). Results/outputs from these queries will be suppressed if there are no errors.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'SQL select query', 'The SQL select query to execute. The query can be empty, a constant value, or built from attributes using Expression Language. If this property is specified, it will be used regardless of the content of incoming flowfiles. If this property is empty, the content of the incoming flow file is expected to contain a valid SQL select query, to be issued by the processor to the database. Note that Expression Language is not evaluated for flow file contents.', true, 'Database-MariaDB'); -- 흐름 상 true
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'sql-post-query', 'A semicolon-delimited list of queries executed after the main SQL query is executed. Example like setting session properties after main query. It''s possible to include semicolons in the statements themselves by escaping them with a backslash (''\\;''). Results/outputs from these queries will be suppressed if there are no errors.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Wait Time', 'The maximum amount of time allowed for a running SQL select query  , zero means there is no limit. Max time less than 1 second will be equal to zero.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0 seconds' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-normalize', 'Whether to change non-Avro-compatible characters in column names to Avro-compatible characters. For example, colons and periods will be changed to underscores in order to build a valid Avro record.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-user-logical-types', 'Whether to use Avro Logical Types for DECIMAL/NUMBER, DATE, TIME and TIMESTAMP columns. If disabled, written as string. If enabled, Logical types are used and written as its underlying type, specifically, DECIMAL/NUMBER as logical ''decimal'': written as bytes with additional precision and scale meta data, DATE as logical ''date-millis'': written as int denoting days since Unix epoch (1970-01-01), TIME as logical ''time-millis'': written as int denoting milliseconds since Unix epoch, and TIMESTAMP as logical ''timestamp-millis'': written as long denoting milliseconds since Unix epoch. If a reader of written Avro records also knows these logical types, then these values can be deserialized with more context depending on reader implementation.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'false,true' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'compression-format', 'Compression type to use when writing Avro files. Default is None.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'NONE,BZIP2,DEFLATE,SNAPPY,LZO' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-default-precision', 'When a DECIMAL/NUMBER value is written as a ''decimal'' Avro logical type, a specific ''precision'' denoting number of available digits is required. Generally, precision is defined by column data type definition or database engines default. However undefined precision (0) can be returned from some database engines. ''Default Decimal Precision'' is used when writing those undefined precision numbers.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '10' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbf-default-scale', 'When a DECIMAL/NUMBER value is written as a ''decimal'' Avro logical type, a specific ''scale'' denoting number of available decimal digits is required. Generally, scale is defined by column data type definition or database engines default. However when undefined precision (0) is returned, scale can also be uncertain with some database engines. ''Default Decimal Scale'' is used when writing those undefined numbers. If a value has more decimals than specified scale, then the value will be rounded-up, e.g. 1.53 becomes 2 with scale 0, and 1.5 with scale 1.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-max-rows', 'The maximum number of result rows that will be included in a single FlowFile. This will allow you to break up very large result sets into multiple FlowFiles. If the value specified is zero, then all rows are returned in a single FlowFile.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-output-batch-size', 'The number of output FlowFiles to queue before committing the process session. When set to zero, the session will be committed when all result set rows have been processed and the output FlowFiles are ready for transfer to the downstream relationship. For large result sets, this can cause a large burst of FlowFiles to be transferred at the end of processor execution. If this property is set, then when the specified number of FlowFiles are ready for transfer, then the session will be committed, thus releasing the FlowFiles to the downstream relationship. NOTE: The fragment.count attribute will not be set on FlowFiles when this property is set.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-fetch-size', 'The number of result rows to be fetched from the result set at a time. This is a hint to the database driver and may not be honored and/or exact. If the value specified is zero, then the hint is ignored.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'esql-auto-commit', 'Enables or disables the auto commit functionality of the DB connection. Default value is ''true''. The default value can be used with most of the JDBC drivers and this functionality doesn''t have any impact in most of the cases since this processor is used to read data. However, for some JDBC drivers such as PostgreSQL driver, it is required to disable the auto committing functionality to limit the number of result rows fetching at a time. When auto commit is enabled, postgreSQL driver loads whole result set to memory at once. This could lead for a large amount of memory usage when executing queries which fetch large data sets. More Details of this behaviour in PostgreSQL driver can be found in https://jdbc.postgresql.org//documentation/head/query.html.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'true,false' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Scheduling', 'Scheduling API call (unit = sec)', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '120 sec' );
-- Controller 구간 : Database user와 password는 nifi 상에서는 선택 값이지만, 흐름 상 필수가 되어야 해서 true로 설정
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('collector', 'Database-MariaDB', 'DBCPConnectionPool', 'Controller');
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Database Connection URL', 'A database connection URL used to connect to a database. May contain database system name, host, port, database name and some parameters. The exact syntax of a database connection URL is specified by your DBMS.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'jdbc:mariadb://mariadb:13306/mytest' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Database User', 'Database user name', true, 'Database-MariaDB'); -- 흐름 상 true가 되어야 함
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Password', 'The password for the database user', true, 'Database-MariaDB'); -- 흐름 상 true가 되어야 함
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Wait Time', 'The maximum amount of time that the pool will wait (when there are no available connections)  for a connection to be returned before failing, or -1 to wait indefinitely. ', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '500 millis' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Max Total Connections', 'The maximum number of active connections that can be allocated from this pool at the same time,  or negative for no limit.', true, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '8' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'Validation-query', 'Validation query used to validate connections before returning them. When connection is invalid, it gets dropped and new valid connection will be returned. Note!! Using validation might have some performance penalty.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-min-idle-conns', 'The minimum number of connections that can remain idle in the pool without extra ones being created. Set to or zero to allow no idle connections.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '0' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-max-idle-conns', 'The maximum number of connections that can remain idle in the pool without extra ones being released. Set to any negative value to allow unlimited idle connections.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '8' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-max-conn-lifetime', 'The maximum lifetime in milliseconds of a connection. After this time is exceeded the connection will fail the next activation, passivation or validation test. A value of zero or less means the connection has an infinite lifetime.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-time-between-eviction-runs', 'The number of milliseconds to sleep between runs of the idle connection evictor thread. When non-positive, no idle connection evictor thread will be run.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-min-evictable-idle-time', 'The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '30 mins' );
INSERT INTO ingest_manager.properties (adaptor_id, property_name, detail, is_required, adaptor_name) values((SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'dbcp-soft-min-evictable-idle-time', 'The minimum amount of time a connection may sit idle in the pool before it is eligible for eviction by the idle connection evictor, with the extra condition that at least a minimum number of idle connections remain in the pool. When the not-soft version of this option is set to a positive value, it is examined first by the idle connection evictor: when idle connections are visited by the evictor, idle time is first compared against it (without considering the number of idle connections in the pool) and then against this soft option, including the minimum idle connections constraint.', false, 'Database-MariaDB');
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), '-1' );


-- filter 구간 --
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('filter', 'filter', 'Base64Decoder', 'Processor');
INSERT INTO ingest_manager.properties (adaptor_name, adaptor_id, property_name, detail, is_required) values( (SELECT adaptor_name FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'isBase64', null, true);
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), 'true,false' );
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('filter', 'filter', 'RootKeyFinder', 'Processor');
INSERT INTO ingest_manager.properties (adaptor_name, adaptor_id, property_name, detail, is_required) values( (SELECT adaptor_name FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'root_key', null, true);
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );


-- converter 구간 --
INSERT INTO ingest_manager.adaptor (adaptor_type, adaptor_name, nifi_name, nifi_type) values ('converter', 'converter', 'IDGenerater', 'Processor');
INSERT INTO ingest_manager.properties (adaptor_name, adaptor_id, property_name, detail, is_required) values( (SELECT adaptor_name FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'level1', null, true);
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_name, adaptor_id, property_name, detail, is_required) values( (SELECT adaptor_name FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'level2', null, true);
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );
INSERT INTO ingest_manager.properties (adaptor_name, adaptor_id, property_name, detail, is_required) values( (SELECT adaptor_name FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), (SELECT id FROM ingest_manager.adaptor ORDER BY ID DESC LIMIT 1), 'level3', null, true);
INSERT INTO ingest_manager.properties_value (property_id, value) values ( (SELECT id FROM ingest_manager.properties ORDER BY ID DESC LIMIT 1), null );